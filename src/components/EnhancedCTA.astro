---
// Enhanced CTA button with WebGL-inspired effects
export interface Props {
	href: string
	text: string
	variant?: 'primary' | 'secondary'
	external?: boolean
	icon?: boolean
}

const { 
	href, 
	text, 
	variant = 'primary', 
	external = false,
	icon = false 
} = Astro.props

const baseClasses = "group relative inline-flex items-center justify-center gap-2 px-8 py-4 font-medium transition-all duration-300 overflow-hidden rounded-lg focus:outline-none focus:ring-4 focus:ring-primary-800"

const variantClasses = {
	primary: "bg-gradient-to-r from-primary-500 to-primary-600 text-white hover:from-primary-600 hover:to-primary-700 shadow-lg hover:shadow-primary-500/25 hover:shadow-xl",
	secondary: "bg-gradient-to-r from-neutral-800 to-neutral-700 text-neutral-100 border border-neutral-600 hover:border-primary-600"
}

const linkProps = external ? {
	target: "_blank",
	rel: "noopener noreferrer"
} : {}
---

<a 
	href={href} 
	class={`${baseClasses} ${variantClasses[variant]} cta-enhanced`}
	{...linkProps}
>
	<!-- Shimmer effect overlay -->
	<div class="absolute inset-0 -translate-x-full bg-gradient-to-r from-transparent via-white/20 to-transparent group-hover:translate-x-full transition-transform duration-700 ease-in-out"></div>
	
	<!-- Floating particles effect -->
	<div class="absolute inset-0 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
		<div class="absolute top-2 left-4 w-1 h-1 bg-white/60 rounded-full animate-float" style="animation-delay: 0s;"></div>
		<div class="absolute top-6 right-8 w-1 h-1 bg-white/40 rounded-full animate-float" style="animation-delay: 0.5s;"></div>
		<div class="absolute bottom-3 left-12 w-1 h-1 bg-white/50 rounded-full animate-float" style="animation-delay: 1s;"></div>
	</div>
	
	<!-- Glow effect -->
	<div class="absolute inset-0 rounded-lg bg-gradient-to-r from-primary-400/20 to-primary-600/20 blur-xl opacity-0 group-hover:opacity-100 transition-opacity duration-300 -z-10 scale-110"></div>
	
	<!-- Button content -->
	<span class="relative z-10 tracking-wide">{text}</span>
	
	{icon && (
		<svg 
			xmlns="http://www.w3.org/2000/svg" 
			fill="none" 
			viewBox="0 0 24 24" 
			stroke-width="1.5" 
			stroke="currentColor" 
			class="relative z-10 w-5 h-5 transition-transform duration-300 group-hover:translate-x-1"
		>
			<path 
				stroke-linecap="round" 
				stroke-linejoin="round" 
				d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25" 
			/>
		</svg>
	)}
</a>

<style>
	/* Custom hover effects for enhanced CRO */
	.cta-enhanced:hover {
		transform: translateY(-2px);
	}
	
	.cta-enhanced:active {
		transform: translateY(0px);
	}

	/* Pulse effect on focus for accessibility */
	.cta-enhanced:focus {
		animation: pulse-glow 2s infinite;
	}

	@keyframes pulse-glow {
		0%, 100% {
			box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.3);
		}
		50% {
			box-shadow: 0 0 0 8px rgba(59, 130, 246, 0.1);
		}
	}
</style>

<script>
	// Enhanced interaction tracking for CRO analytics
	document.addEventListener('DOMContentLoaded', () => {
		const ctaButtons = document.querySelectorAll('.cta-enhanced')
		
		ctaButtons.forEach((button) => {
			// Track hover interactions
			button.addEventListener('mouseenter', () => {
				// Here you can add analytics tracking
				// Example: analytics.track('CTA_Hover', { button: button.textContent })
			})
			
			// Track click with enhanced data
			button.addEventListener('click', (e) => {
				const buttonText = button.textContent?.trim()
				const buttonHref = button.getAttribute('href')
				
				// Add visual feedback
				const htmlButton = button as HTMLElement
				htmlButton.style.transform = 'scale(0.98)'
				setTimeout(() => {
					htmlButton.style.transform = ''
				}, 150)
				
				// Analytics tracking
				// analytics.track('CTA_Click', { 
				//   button: buttonText, 
				//   href: buttonHref,
				//   timestamp: Date.now()
				// })
			})
		})
	})
</script>